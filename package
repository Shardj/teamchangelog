#!/bin/bash

# Usage info
show_help() {
cat << EOF
Usage: [-hf] [-v <git tag>]

Parameter details:
    -h display help and exit
    -f force git tag creation
    -v git tag, checkout release tag specified
EOF
}

# Initialise variables

OPTIND=1 # Reset for previous uses of getops in shell
OPTSTRING="fv:"
gitTag=false
force=false
libraryDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )" # directory the script is inside
cd "$libraryDir"
yamlfile="package.yaml"

while getopts "$OPTSTRING" opt; do
    case "$opt" in
    h)
        show_help
        exit 0
        ;;
    f)
        force=true
        ;;
    v)
        gitTag=$OPTARG
        ;;
    *)
        show_help >&2
        exit 1
        ;;
    esac
done

function parse_yaml {
    local prefix=$2
    local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
    sed -ne "s|^\($s\):|\1|" \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p"  $1 |
    awk -F$fs '{
        indent = length($1)/2;
        vname[indent] = $2;
        for (i in vname) {if (i > indent) {delete vname[i]}}
        if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
        }
    }'
}

function prepend_text_to_file {
    echo -e "$1$(cat $2)" > $2
}

if [[ -f "$yamlfile" ]]; then
    # takes values from yaml file and converts them into bash variables
    eval $(parse_yaml "$yamlfile")
else
    echo "$yamlfile not found"
    exit 1
fi

# Validation
# we move into project file path for git commands
cd "$project_file_path"

if [[ ! "$gitTag" =~ $tag_validation_regex ]]; then
    echo "Invalid tag supplied must match $tag_validation_regex"
    exit 1
fi

# if tag already exists and we aren't going to force tag creation
if git rev-parse "$gitTag" >/dev/null 2>&1 && [[ "$force" == false ]]; then
    echo "tag already exists"
    exit 1
fi

cd "$libraryDir"

if [[ ! -f "$changelog_file_path" ]]; then
    echo "$changelog_file_path is not a file"
fi

if [[ ! -d "$unreleased_changes_directory_path" ]]; then
    echo "$unreleased_changes_directory_path is not a directory"
fi

if [[ "$(ls -1 "$unreleased_changes_directory_path" | wc -l)" == 0 ]]; then
    echo "changes directory is empty"
    exit 1
fi

# Append tag and date to changelog
echo "Adding to $changelog_file_path"

newChange="# Tag: $gitTag    Packaged on: $(date)\n"

# Iterate over files by globbing
for filepath in "$unreleased_changes_directory_path"*; do
    # avoid glob not matching
    [ -e "$filepath" ] || continue

    # read file line by line
    # -r prevents backslash escapes from being interpreted.
    # || [[ -n $line ]] prevents the last line from being ignored if it doesn't end with a \n (since read returns a non-zero
    # exit code when it encounters EOF).
    while read -r line || [[ -n "$line" ]]; do

        # strips directory path prefix off of path to file to leave only the filepath
        trueFilename=${filepath#"$unreleased_changes_directory_path"}
        # add to newChange
        newChange="$newChange$trueFilename - $line\n"
    done < "$filepath"
done
newChange="$newChange\n"

prepend_text_to_file "$newChange" "$changelog_file_path"

# Remove files in $unreleased_changes_directory_path as they're now in the changelog
echo "Removing files matching $unreleased_changes_directory_path*"
rm -rf "$unreleased_changes_directory_path"*

# Tag creation
cd "$project_file_path"
if [[ $force == true ]]; then
    echo "Force creating tag $gitTag"
    git tag -f "$gitTag"
else
    echo "Creating tag $gitTag"
    git tag "$gitTag"
fi
